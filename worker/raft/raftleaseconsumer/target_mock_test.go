// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/raftlease (interfaces: NotifyTarget)

// Package raftleaseconsumer is a generated GoMock package.
package raftleaseconsumer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lease "github.com/juju/juju/core/lease"
)

// MockNotifyTarget is a mock of NotifyTarget interface.
type MockNotifyTarget struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyTargetMockRecorder
}

// MockNotifyTargetMockRecorder is the mock recorder for MockNotifyTarget.
type MockNotifyTargetMockRecorder struct {
	mock *MockNotifyTarget
}

// NewMockNotifyTarget creates a new mock instance.
func NewMockNotifyTarget(ctrl *gomock.Controller) *MockNotifyTarget {
	mock := &MockNotifyTarget{ctrl: ctrl}
	mock.recorder = &MockNotifyTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyTarget) EXPECT() *MockNotifyTargetMockRecorder {
	return m.recorder
}

// Claimed mocks base method.
func (m *MockNotifyTarget) Claimed(arg0 lease.Key, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Claimed", arg0, arg1)
}

// Claimed indicates an expected call of Claimed.
func (mr *MockNotifyTargetMockRecorder) Claimed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claimed", reflect.TypeOf((*MockNotifyTarget)(nil).Claimed), arg0, arg1)
}

// Expired mocks base method.
func (m *MockNotifyTarget) Expired(arg0 lease.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Expired", arg0)
}

// Expired indicates an expected call of Expired.
func (mr *MockNotifyTargetMockRecorder) Expired(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expired", reflect.TypeOf((*MockNotifyTarget)(nil).Expired), arg0)
}
