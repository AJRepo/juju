// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/machinemanager (interfaces: UpgradeSeries,UpgradeSeriesAuthorizer,UpgradeSeriesState,UpgradeSeriesValidator)

// Package machinemanager is a generated GoMock package.
package machinemanager

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUpgradeSeries is a mock of UpgradeSeries interface
type MockUpgradeSeries struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesMockRecorder
}

// MockUpgradeSeriesMockRecorder is the mock recorder for MockUpgradeSeries
type MockUpgradeSeriesMockRecorder struct {
	mock *MockUpgradeSeries
}

// NewMockUpgradeSeries creates a new mock instance
func NewMockUpgradeSeries(ctrl *gomock.Controller) *MockUpgradeSeries {
	mock := &MockUpgradeSeries{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgradeSeries) EXPECT() *MockUpgradeSeriesMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockUpgradeSeries) Validate(arg0 []ValidationEntity) ([]ValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].([]ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockUpgradeSeriesMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUpgradeSeries)(nil).Validate), arg0)
}

// MockUpgradeSeriesAuthorizer is a mock of UpgradeSeriesAuthorizer interface
type MockUpgradeSeriesAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesAuthorizerMockRecorder
}

// MockUpgradeSeriesAuthorizerMockRecorder is the mock recorder for MockUpgradeSeriesAuthorizer
type MockUpgradeSeriesAuthorizerMockRecorder struct {
	mock *MockUpgradeSeriesAuthorizer
}

// NewMockUpgradeSeriesAuthorizer creates a new mock instance
func NewMockUpgradeSeriesAuthorizer(ctrl *gomock.Controller) *MockUpgradeSeriesAuthorizer {
	mock := &MockUpgradeSeriesAuthorizer{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgradeSeriesAuthorizer) EXPECT() *MockUpgradeSeriesAuthorizerMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockUpgradeSeriesAuthorizer) Read() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockUpgradeSeriesAuthorizerMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUpgradeSeriesAuthorizer)(nil).Read))
}

// Write mocks base method
func (m *MockUpgradeSeriesAuthorizer) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockUpgradeSeriesAuthorizerMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockUpgradeSeriesAuthorizer)(nil).Write))
}

// MockUpgradeSeriesState is a mock of UpgradeSeriesState interface
type MockUpgradeSeriesState struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesStateMockRecorder
}

// MockUpgradeSeriesStateMockRecorder is the mock recorder for MockUpgradeSeriesState
type MockUpgradeSeriesStateMockRecorder struct {
	mock *MockUpgradeSeriesState
}

// NewMockUpgradeSeriesState creates a new mock instance
func NewMockUpgradeSeriesState(ctrl *gomock.Controller) *MockUpgradeSeriesState {
	mock := &MockUpgradeSeriesState{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgradeSeriesState) EXPECT() *MockUpgradeSeriesStateMockRecorder {
	return m.recorder
}

// ApplicationsFromMachine mocks base method
func (m *MockUpgradeSeriesState) ApplicationsFromMachine(arg0 Machine) ([]Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationsFromMachine", arg0)
	ret0, _ := ret[0].([]Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationsFromMachine indicates an expected call of ApplicationsFromMachine
func (mr *MockUpgradeSeriesStateMockRecorder) ApplicationsFromMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationsFromMachine", reflect.TypeOf((*MockUpgradeSeriesState)(nil).ApplicationsFromMachine), arg0)
}

// MachineFromTag mocks base method
func (m *MockUpgradeSeriesState) MachineFromTag(arg0 string) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineFromTag", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineFromTag indicates an expected call of MachineFromTag
func (mr *MockUpgradeSeriesStateMockRecorder) MachineFromTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineFromTag", reflect.TypeOf((*MockUpgradeSeriesState)(nil).MachineFromTag), arg0)
}

// UnitsFromMachine mocks base method
func (m *MockUpgradeSeriesState) UnitsFromMachine(arg0 Machine) ([]Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitsFromMachine", arg0)
	ret0, _ := ret[0].([]Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitsFromMachine indicates an expected call of UnitsFromMachine
func (mr *MockUpgradeSeriesStateMockRecorder) UnitsFromMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitsFromMachine", reflect.TypeOf((*MockUpgradeSeriesState)(nil).UnitsFromMachine), arg0)
}

// MockUpgradeSeriesValidator is a mock of UpgradeSeriesValidator interface
type MockUpgradeSeriesValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesValidatorMockRecorder
}

// MockUpgradeSeriesValidatorMockRecorder is the mock recorder for MockUpgradeSeriesValidator
type MockUpgradeSeriesValidatorMockRecorder struct {
	mock *MockUpgradeSeriesValidator
}

// NewMockUpgradeSeriesValidator creates a new mock instance
func NewMockUpgradeSeriesValidator(ctrl *gomock.Controller) *MockUpgradeSeriesValidator {
	mock := &MockUpgradeSeriesValidator{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgradeSeriesValidator) EXPECT() *MockUpgradeSeriesValidatorMockRecorder {
	return m.recorder
}

// ValidateApplications mocks base method
func (m *MockUpgradeSeriesValidator) ValidateApplications(arg0 []Application, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplications", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateApplications indicates an expected call of ValidateApplications
func (mr *MockUpgradeSeriesValidatorMockRecorder) ValidateApplications(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplications", reflect.TypeOf((*MockUpgradeSeriesValidator)(nil).ValidateApplications), arg0, arg1, arg2)
}

// ValidateSeries mocks base method
func (m *MockUpgradeSeriesValidator) ValidateSeries(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSeries", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSeries indicates an expected call of ValidateSeries
func (mr *MockUpgradeSeriesValidatorMockRecorder) ValidateSeries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSeries", reflect.TypeOf((*MockUpgradeSeriesValidator)(nil).ValidateSeries), arg0, arg1, arg2)
}
